"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./lib/supabase.js":
/*!*************************!*\
  !*** ./lib/supabase.js ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOperations: () => (/* binding */ authOperations),\n/* harmony export */   createTables: () => (/* binding */ createTables),\n/* harmony export */   dataSourceOperations: () => (/* binding */ dataSourceOperations),\n/* harmony export */   removalOperations: () => (/* binding */ removalOperations),\n/* harmony export */   searchOperations: () => (/* binding */ searchOperations),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Environment variables for Supabase configuration\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n    console.error('Missing Supabase environment variables. Please check your .env.local file.');\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Database schema for our application\nconst createTables = async ()=>{\n    // This would be run once to set up the database schema\n    // In a real application, this would be done via Supabase dashboard or migrations\n    const searchHistoryTable = \"\\n    CREATE TABLE IF NOT EXISTS search_history (\\n      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\\n      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\\n      full_name TEXT NOT NULL,\\n      phone TEXT,\\n      email TEXT,\\n      results JSONB,\\n      user_id UUID REFERENCES auth.users(id)\\n    );\\n  \";\n    const dataSourcesTable = \"\\n    CREATE TABLE IF NOT EXISTS data_sources (\\n      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\\n      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\\n      name TEXT NOT NULL UNIQUE,\\n      url TEXT NOT NULL,\\n      api_endpoint TEXT,\\n      risk_level TEXT CHECK (risk_level IN ('low', 'medium', 'high')),\\n      description TEXT,\\n      data_types TEXT[],\\n      is_active BOOLEAN DEFAULT true\\n    );\\n  \";\n    const removalRequestsTable = \"\\n    CREATE TABLE IF NOT EXISTS removal_requests (\\n      id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\\n      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\\n      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\\n      user_id UUID REFERENCES auth.users(id),\\n      data_source_id UUID REFERENCES data_sources(id),\\n      full_name TEXT NOT NULL,\\n      phone TEXT,\\n      email TEXT,\\n      status TEXT CHECK (status IN ('pending', 'submitted', 'completed', 'failed')) DEFAULT 'pending',\\n      notes TEXT\\n    );\\n  \";\n    console.log('Database schema defined. In production, these would be created via Supabase dashboard.');\n    return {\n        searchHistoryTable,\n        dataSourcesTable,\n        removalRequestsTable\n    };\n};\n// Helper functions for database operations\nconst searchOperations = {\n    // Save search results to database\n    saveSearch: async (searchData)=>{\n        try {\n            const { data, error } = await supabase.from('search_history').insert([\n                searchData\n            ]).select();\n            if (error) throw error;\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error('Error saving search:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Get user's search history\n    getSearchHistory: async (userId)=>{\n        try {\n            const { data, error } = await supabase.from('search_history').select('*').eq('user_id', userId).order('created_at', {\n                ascending: false\n            });\n            if (error) throw error;\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error('Error fetching search history:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    }\n};\nconst dataSourceOperations = {\n    // Get all active data sources\n    getDataSources: async ()=>{\n        try {\n            const { data, error } = await supabase.from('data_sources').select('*').eq('is_active', true).order('name');\n            if (error) throw error;\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error('Error fetching data sources:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Add a new data source\n    addDataSource: async (sourceData)=>{\n        try {\n            const { data, error } = await supabase.from('data_sources').insert([\n                sourceData\n            ]).select();\n            if (error) throw error;\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error('Error adding data source:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    }\n};\nconst removalOperations = {\n    // Submit a removal request\n    submitRemovalRequest: async (requestData)=>{\n        try {\n            const { data, error } = await supabase.from('removal_requests').insert([\n                requestData\n            ]).select();\n            if (error) throw error;\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error('Error submitting removal request:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Get user's removal requests\n    getRemovalRequests: async (userId)=>{\n        try {\n            const { data, error } = await supabase.from('removal_requests').select(\"\\n          *,\\n          data_sources (\\n            name,\\n            url\\n          )\\n        \").eq('user_id', userId).order('created_at', {\n                ascending: false\n            });\n            if (error) throw error;\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error('Error fetching removal requests:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Update removal request status\n    updateRemovalStatus: async function(requestId, status) {\n        let notes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        try {\n            const updateData = {\n                status,\n                updated_at: new Date().toISOString()\n            };\n            if (notes) updateData.notes = notes;\n            const { data, error } = await supabase.from('removal_requests').update(updateData).eq('id', requestId).select();\n            if (error) throw error;\n            return {\n                data,\n                error: null\n            };\n        } catch (error) {\n            console.error('Error updating removal request:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    }\n};\n// Authentication helpers\nconst authOperations = {\n    // Sign up a new user\n    signUp: async (email, password)=>{\n        try {\n            const { data, error } = await supabase.auth.signUp({\n                email,\n                password\n            });\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            console.error('Error signing up:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Sign in user\n    signIn: async (email, password)=>{\n        try {\n            const { data, error } = await supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            return {\n                data,\n                error\n            };\n        } catch (error) {\n            console.error('Error signing in:', error);\n            return {\n                data: null,\n                error\n            };\n        }\n    },\n    // Sign out user\n    signOut: async ()=>{\n        try {\n            const { error } = await supabase.auth.signOut();\n            return {\n                error\n            };\n        } catch (error) {\n            console.error('Error signing out:', error);\n            return {\n                error\n            };\n        }\n    },\n    // Get current user\n    getCurrentUser: async ()=>{\n        try {\n            const { data: { user }, error } = await supabase.auth.getUser();\n            return {\n                user,\n                error\n            };\n        } catch (error) {\n            console.error('Error getting user:', error);\n            return {\n                user: null,\n                error\n            };\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase.js\n"));

/***/ })

});